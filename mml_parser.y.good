%{
//-- don't change *any* of these: if you do, you'll break the compiler.
#include <algorithm>
#include <memory>
#include <cstring>
#include <cdk/compiler.h>
#include <cdk/types/types.h>
#include ".auto/all_nodes.h"
#define LINE                         compiler->scanner()->lineno()
#define yylex()                      compiler->scanner()->scan()
#define yyerror(compiler, s)         compiler->scanner()->error(s)
//-- don't change *any* of these --- END!
%}

%parse-param {std::shared_ptr<cdk::compiler> compiler}

%union {
  
  //--- don't change *any* of these: if you do, you'll break the compiler.
  YYSTYPE() : type(cdk::primitive_type::create(0, cdk::TYPE_VOID)) {}
  ~YYSTYPE() {}
  YYSTYPE(const YYSTYPE &other) { *this = other; }
  YYSTYPE& operator=(const YYSTYPE &other) { type = other.type; return *this; }

  std::shared_ptr<cdk::basic_type> type;        /* expression type */
  //-- don't change *any* of these --- END!




// pre entrega
  int                   i;	/* integer value */
  double                d;
  std::string          *s;	/* symbol name or string literal */
  cdk::basic_node      *node;	/* node pointer */
  cdk::sequence_node   *sequence;
  cdk::expression_node *expression; /* expression nodes */
  cdk::lvalue_node     *lvalue;
// pos entrega
  mml::block_node *block;
  mml::function_definition_node *fdefinition;
  mml::variable_declaration_node *vdeclaration;
  mml::while_node *loop;
  std::shared_ptr<cdk::basic_type> vartype;
  std::vector<std::shared_ptr<cdk::basic_type>> *types;


};

%token <i> tINTEGER
%token <s> tIDENTIFIER tSTRING

// pos entrega
%token <d> tREAL
// pos entrega

%token tWHILE tIF tPRINT tPRINTNL tREAD tBEGIN tEND tTHEN tARROW

// pos entrega
%token <i> tPUBLIC tFOREIGN  tFORWARD tPRIVATE
%token <vartype> tAUTO
%token tINT_TYPE tREAL_TYPE tSTRING_TYPE tVOID_TYPE
%token tSTOP tNEXT tRETURN
%token tINPUT tNULLPTR tSIZEOF
%token tOR tBRACKETS tBRACKETE
  
%nonassoc tIF
%nonassoc ')'
%nonassoc tELIF tELSE 

%right '~'
%right '='

%left tOR tAND
%left tGE tLE tEQ tNE '>' '<'
%left '+' '-'
%left '*' '/' '%'

%left '?'

%nonassoc '(' '[' ']' 

%right tUNARY

%type <node> instruction cond_instr elif
%type <expression> expr opt_expr expr_assignment  
%type <lvalue> lval
%type <sequence> file filedeclarations declarations instructions exprs vars opt_args
%type <types> types
%type <fdefinition> program function
%type <vartype> type func_type
%type <i> qualifier
%type <vdeclaration> declaration filedeclaration var
%type <block> block
%type <loop> iteration_expr
%type <s> string

%{
//-- The rules below will be included in yyparse, the main parsing function.
%}

%%

file : /* empty */                  { compiler->ast($$ = new cdk::sequence_node(LINE)); }
     | filedeclarations             { compiler->ast($$ = $1); }
     |                  program     { compiler->ast($$ = new cdk::sequence_node(LINE, $1)); }
     | filedeclarations program     { compiler->ast($$ = new cdk::sequence_node(LINE, $2, $1)); }
     ;

filedeclarations:                  filedeclaration { $$ = new cdk::sequence_node(LINE, $1); }
                | filedeclarations filedeclaration { $$ = new cdk::sequence_node(LINE, $2, $1); }
                ;

filedeclaration : tPUBLIC     type tIDENTIFIER opt_expr             { $$ = new mml::variable_declaration_node(LINE, tPUBLIC, $2, *$3, $4); delete $3; }   
                | tFORWARD    type tIDENTIFIER ';'                  { $$ = new mml::variable_declaration_node(LINE, tFORWARD, $2, *$3, nullptr); delete $3; }
                | tFOREIGN    type tIDENTIFIER ';'                  { $$ = new mml::variable_declaration_node(LINE, tFOREIGN, $2, *$3, nullptr); delete $3; }
                | tPUBLIC          tIDENTIFIER opt_expr             { $$ = new mml::variable_declaration_node(LINE, tPUBLIC, nullptr, *$2, $3); delete $2; } 
                | tPUBLIC    tAUTO tIDENTIFIER expr_assignment      { $$ = new mml::variable_declaration_node(LINE, tPUBLIC, cdk::primitive_type::create(4, cdk::typename_type::TYPE_UNSPEC), *$3, $4); delete $3; } 
                |            tAUTO tIDENTIFIER expr_assignment      { $$ = new mml::variable_declaration_node(LINE, tPUBLIC, cdk::primitive_type::create(4, cdk::typename_type::TYPE_UNSPEC), *$2, $3); delete $2; } 
                |             type tIDENTIFIER opt_expr                  { $$ = new mml::variable_declaration_node(LINE, tPUBLIC, $1, *$2, $3); delete $2; } 
                ; 

program	        : tBEGIN declarations instructions tEND     { $$ = new mml::function_definition_node(LINE, nullptr, cdk::primitive_type::create(4, cdk::typename_type::TYPE_INT), new mml::block_node(LINE, $2, $3), true);  }
                | tBEGIN declarations              tEND     { $$ = new mml::function_definition_node(LINE, nullptr, cdk::primitive_type::create(4, cdk::typename_type::TYPE_INT), new mml::block_node(LINE, $2, nullptr), true);  }
                | tBEGIN              instructions tEND     { $$ = new mml::function_definition_node(LINE, nullptr, cdk::primitive_type::create(4, cdk::typename_type::TYPE_INT), new mml::block_node(LINE, nullptr, $2), true);  }
                | tBEGIN                           tEND     { $$ = new mml::function_definition_node(LINE, nullptr, cdk::primitive_type::create(4, cdk::typename_type::TYPE_INT), nullptr, true);  }
                ;

declarations    :               declaration  { $$ = new cdk::sequence_node(LINE, $1); }
                |  declarations declaration  { $$ = new cdk::sequence_node(LINE, $2, $1); }
                ;

block      :     '{'declarations instructions'}'  {$$ = new mml::block_node(LINE, $2, $3);}
           |     '{'declarations             '}'  {$$ = new mml::block_node(LINE, $2, nullptr);}
           |     '{'             instructions'}'  {$$ = new mml::block_node(LINE, nullptr, $2);}
           |     '{'                         '}'  {$$ = new mml::block_node(LINE, nullptr, nullptr);}
           ;

qualifier : tPUBLIC             { $$ = $1; }   
          | tFORWARD            { $$ = $1; }
          | tFOREIGN            { $$ = $1; }
          ;      

declaration:    qualifier type  tIDENTIFIER opt_expr        { $$ = new mml::variable_declaration_node(LINE, $1, $2, *$3, $4); delete $3; }
           |              type  tIDENTIFIER opt_expr        { $$ = new mml::variable_declaration_node(LINE, tPRIVATE, $1, *$2, $3); delete $2; }
           |    tPUBLIC   tAUTO tIDENTIFIER expr_assignment { $$ = new mml::variable_declaration_node(LINE, $1, cdk::primitive_type::create(4, cdk::typename_type::TYPE_UNSPEC), *$3, $4); delete $3; }
           |    tPUBLIC         tIDENTIFIER expr_assignment { $$ = new mml::variable_declaration_node(LINE, $1, nullptr, *$2, $3); delete $2; }
           |              tAUTO tIDENTIFIER expr_assignment { $$ = new mml::variable_declaration_node(LINE, tPUBLIC, cdk::primitive_type::create(4, cdk::typename_type::TYPE_UNSPEC), *$2, $3); delete $2; }
           ;

opt_expr   : ';'                                          { $$ = nullptr; }
           | expr_assignment                              { $$ = $1; }

expr_assignment :  '=' expr ';'                   { $$ = $2; }
                ;

instructions    :              instruction        { $$ = new cdk::sequence_node(LINE, $1); }
                | instructions instruction        { $$ = new cdk::sequence_node(LINE, $2, $1); }
                ;

instruction     : expr ';'                { $$ = new mml::evaluation_node(LINE, $1); }
                | exprs tPRINT            { $$ = new mml::print_node(LINE, $1, false); }
                | exprs tPRINTNL          { $$ = new mml::print_node(LINE, $1, true); }
                | tSTOP ';'               { $$ = new mml::stop_node(LINE, 1); }
                | tSTOP tINTEGER ';'          { $$ = new mml::stop_node(LINE, $2); }
                | tNEXT ';'               { $$ = new mml::next_node(LINE, 1); }
                | tNEXT tINTEGER ';'          { $$ = new mml::next_node(LINE, $2); }
                | tRETURN ';'             { $$ = new mml::return_node(LINE, nullptr); }
                | tRETURN expr ';'        { $$ = new mml::return_node(LINE, $2); }
                | block                   { $$ = $1;}
                | cond_instr              { $$ = $1;}
                | iteration_expr          { $$ = $1;}
                ;

cond_instr     : tIF '(' expr ')' instruction       { $$ = new mml::if_node(LINE, $3, $5); };
               | tIF '(' expr ')' instruction elif  { $$ = new mml::if_else_node(LINE, $3, $5, $6); }
               ;

elif        : tELSE instruction                               { $$ = $2; }
            | tELIF '(' expr ')' instruction  %prec tIF { $$ = new mml::if_else_node(LINE, $3, $5,nullptr); }
            | tELIF '(' expr ')' instruction elif       { $$ = new mml::if_else_node(LINE, $3, $5, $6); }

iteration_expr  :  tWHILE '(' expr ')' instruction      { $$ = new mml::while_node(LINE, $3, $5); }  
                ;    

type  : tINT_TYPE { $$ = cdk::primitive_type::create(4, cdk::TYPE_INT);    }
      | tREAL_TYPE { $$ = cdk::primitive_type::create(8, cdk::TYPE_DOUBLE); }
      | tSTRING_TYPE { $$ = cdk::primitive_type::create(4, cdk::TYPE_STRING); }
      | tVOID_TYPE { $$ = cdk::reference_type::create(4, cdk::primitive_type::create(4, cdk::TYPE_VOID)); } 
      | tBRACKETS type tBRACKETE{ if ($2->name() == cdk::TYPE_POINTER && cdk::reference_type::cast($2)->referenced()->name() == cdk::TYPE_VOID) {$$ = cdk::reference_type::create(4, cdk::primitive_type::create(4, cdk::TYPE_VOID)); } else {$$ = cdk::reference_type::create(4, $2);     }   }
      | func_type {$$ = $1;}
      ;

types : types type    {$$ = $1; $$->push_back($2); }
      |       type    { $$ = new std::vector<std::shared_ptr<cdk::basic_type>>(); $$->push_back($1); }
      ;

func_type :   type '<' types '>'         {$$ = cdk::functional_type::create(*$3, cdk::primitive_type::create(4, cdk::TYPE_VOID));delete $3;}
          |   type '<' '>'               {$$ = cdk::functional_type::create(cdk::primitive_type::create(4, cdk::TYPE_VOID));}
          ;

exprs          : expr                       { $$ = new cdk::sequence_node(LINE, $1); }   
               | exprs ',' expr             { $$ = new cdk::sequence_node(LINE, $3, $1); }
               ;

opt_args    : exprs   {$$ =$1;}
            |         {$$= new cdk::sequence_node(LINE);}
            ;

expr : tINTEGER                { $$ = new cdk::integer_node(LINE, $1); }
     | '~' expr                { $$ = new cdk::not_node(LINE, $2); }
	   | tREAL                   { $$ = new cdk::double_node(LINE, $1); }
     | string                  { $$ = new cdk::string_node(LINE, $1); }
     | '-' expr %prec tUNARY   { $$ = new cdk::neg_node(LINE, $2); }
     | expr '+' expr	         { $$ = new cdk::add_node(LINE, $1, $3); }
     | expr '-' expr	         { $$ = new cdk::sub_node(LINE, $1, $3); }
     | expr '*' expr	         { $$ = new cdk::mul_node(LINE, $1, $3); }
     | expr '/' expr	         { $$ = new cdk::div_node(LINE, $1, $3); }
     | expr '%' expr	         { $$ = new cdk::mod_node(LINE, $1, $3); }
     | expr '<' expr	         { $$ = new cdk::lt_node(LINE, $1, $3); }
     | expr '>' expr	         { $$ = new cdk::gt_node(LINE, $1, $3); }
     | expr tGE expr	         { $$ = new cdk::ge_node(LINE, $1, $3); }
     | expr tLE expr           { $$ = new cdk::le_node(LINE, $1, $3); }
     | expr tNE expr	         { $$ = new cdk::ne_node(LINE, $1, $3); }
     | expr tEQ expr	         { $$ = new cdk::eq_node(LINE, $1, $3); }
     | '(' expr ')'            { $$ = $2; }
     | lval                    { $$ = new cdk::rvalue_node(LINE, $1); }  //FIXME
     | lval '=' expr           { $$ = new cdk::assignment_node(LINE, $1, $3); }
     | tBRACKETS expr tBRACKETE { $$ = new mml::alloc_node(LINE, $2); }
     | '+' expr %prec tUNARY   { $$ = new mml::identity_node(LINE, $2); }
     | lval '?'                { $$ = new mml::address_node(LINE, $1); } 
     | expr tAND expr          { $$ = new cdk::and_node(LINE, $1, $3); }
     | expr tOR expr           { $$ = new cdk::or_node (LINE, $1, $3); }
     | function                { $$ = $1; }
     | tNULLPTR                { $$ = new mml::null_node(LINE); }
     | expr  '(' opt_args ')'  { $$ = new mml::function_call_node(LINE, $1, $3); }
     | '@' '(' opt_args ')'       { $$ = new mml::function_call_node(LINE, nullptr, $3); }         
     | tSIZEOF '(' expr ')'    { $$ = new mml::sizeof_node(LINE, $3); }  
     ;

lval : tIDENTIFIER             { $$ = new cdk::variable_node(LINE, $1); }
     ;

function  :    '(' ')' tARROW type block   { $$ = new mml::function_definition_node(LINE, nullptr, $4, $5); }
          |    '(' vars ')' tARROW type block { $$ = new mml::function_definition_node(LINE, $2, $5, $6); }

vars   :  vars ',' var      { $$ = new cdk::sequence_node(LINE, $3, $1); }
       |           var      { $$ = new cdk::sequence_node(LINE, $1);}

var    : type tIDENTIFIER                { $$ = new mml::variable_declaration_node(LINE, tPRIVATE, $1, *$2,nullptr); delete $2; }
       ;

string          :  tSTRING                     { $$ = $1; }
                | string tSTRING                 { $$ = $1; $$->append(*$2); delete $2; }

%%