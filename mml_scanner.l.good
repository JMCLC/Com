%option c++ prefix="mml_scanner_" outfile="mml_scanner.cpp"
%option stack noyywrap yylineno 8bit debug
%{ 
// make relevant includes before including the parser's tab file
#include <string>
#include <cdk/ast/sequence_node.h>
#include <cdk/ast/expression_node.h>
#include <cdk/ast/lvalue_node.h>
#include "mml_parser.tab.h"
#include <sstream>

static std::ostringstream strlit;

// don't change this
#define yyerror LexerError
%}
%x X_STRING X_BACKSLASH OCTAL_INT X_COMMENT
%%
  yydebug=1; set_debug(1);


">="                   return tGE; 
"<="                   return tLE; 
"=="                   return tEQ; 
"!="                   return tNE; 

"||"                   return tOR;
"&&"                   return tAND;

"->"                   return tARROW;

"["                    return tBRACKETS;
"]"                    return tBRACKETE;

"int"                  return tINT_TYPE;
"double"               return tREAL_TYPE;
"string"               return tSTRING_TYPE;
"void"                 return tVOID_TYPE;

"forward"               return tFORWARD;
"auto"                 return tAUTO;
"public"               return tPUBLIC;
"foreign"              return tFOREIGN;

"then:"                return tTHEN; 
"elif"                 return tELIF; 
"stop"                 return tSTOP;
"next"                 return tNEXT;
"return"               return tRETURN;
"null"                 return tNULLPTR;
"input"                return tINPUT;
"sizeof"               return tSIZEOF;

"while"                return tWHILE;


"if"                   return tIF; 
"else"                 return tELSE;

"!!"                   return tPRINTNL;
"!"                    return tPRINT;

"print"                return tPRINT; 
"read"                 return tREAD; 
"begin"                return tBEGIN; 
"end"                  return tEND; 

[A-Za-z][A-Za-z0-9_]*  yylval.s = new std::string(yytext); return tIDENTIFIER;

  /* ====================================================================== */
  /* ====[             2.7.3 - CADEIAS DE CARACTERES                  ]==== */
  /* ====================================================================== */

"\""                          yy_push_state(X_STRING);
<X_STRING>\\                  yy_push_state(X_BACKSLASH);
<X_STRING>"\""                {
                                yylval.s = new std::string(strlit.str());
                                strlit.str("");
                                yy_pop_state();
                                return tSTRING;
                              }

<X_STRING>"...\n"             ;
<X_STRING>\0                  yyerror("NULL character in string");               
<X_STRING>\n                  yyerror("Newline in string");          
<X_STRING>.                   strlit << *yytext;
                              
<X_BACKSLASH>t                 strlit << '\t'; yy_pop_state();
<X_BACKSLASH>n                 strlit << '\n'; yy_pop_state();
<X_BACKSLASH>r                 strlit << '\r'; yy_pop_state();
<X_BACKSLASH>\"                strlit << '\"'; yy_pop_state();
<X_BACKSLASH>\\                strlit << '\\'; yy_pop_state();

<X_BACKSLASH>[0-7]{1,3}        {
                                 unsigned long res = std::stoul(yytext, NULL, 8);
                                 if (res > 255) {
                                  yyerror("Invalid 8 bit number.");
                                 }
                                 strlit << (char)(unsigned char)res;
                                 yy_pop_state();
                               }
<X_BACKSLASH>.                 strlit << *yytext; yy_pop_state(); 




"/*"                   yy_push_state(X_COMMENT);
<X_COMMENT>"/*"        yy_push_state(X_COMMENT);
<X_COMMENT>"*/"        yy_pop_state();
<X_COMMENT>.|\n        ; /* ignore content */



  /* ====================================================================== */
  /* ====[                   2.7.1 - inteiros                         ]==== */
  /* ====================================================================== */


0[0-7]+              { try { yylval.i = std::stoul(yytext, NULL, 8); return tINTEGER; } catch (const std::out_of_range& e) { yyerror("Integer is out of range"); } }
0[0-9]+              yyerror("Invalid base 8 number.");
0|[1-9][0-9]*        { try { yylval.i = std::stoul(yytext, NULL, 10); return tINTEGER;} catch (const std::out_of_range& e) {yyerror("Integer is out of range"); } }

  /* ====================================================================== */
  /* ====[                   2.7.2 - reais                            ]==== */
  /* ====================================================================== */

([0-9]*\.[0-9]+|[0-9]+\.[0-9]*)([eE][-+]?[0-9]+)? { yylval.d = strtod(yytext, nullptr); return tREAL; }

[-()<>=+*/%;{}.~,]       return *yytext;

[ \t\n]+               ; /* ignore whitespace */

.                      yyerror("Unknown character");

%%
