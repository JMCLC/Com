%option c++ prefix="mml_scanner_" outfile="mml_scanner.cpp"
%option stack noyywrap yylineno 8bit debug
%{ 
// make relevant includes before including the parser's tab file
#include <string>
#include <sstream>
#include <cdk/ast/sequence_node.h>
#include <cdk/ast/expression_node.h>
#include <cdk/ast/lvalue_node.h>
#include "mml_parser.tab.h"

static std::ostringstream strlit;

// don't change this
#define yyerror LexerError
%}
%x X_STRING X_BACKSLASH OCTAL_INT X_COMMENT
%%
  yydebug=1; set_debug(1);

 /* ==================== */
 /* ===[ OPERADORES ]=== */
 /* ==================== */

">="                          return tGE; 
"<="                          return tLE; 
"=="                          return tEQ; 
"!="                          return tNE; 
"&&"                          return tAND;
"||"                          return tOR;
"sizeof"                      return tSIZEOF;
"->"                          return tARROW;
"["                           return tBRACKET;
"]"                           return tRBRACKET;

 /* ================ */
 /* ===[ CICLOS ]=== */
 /* ================ */

"while"                return tWHILE; 
"begin"                return tBEGIN; 
"end"                  return tEND;

 /* ======================== */
 /* ===[ LER E ESCREVER ]=== */
 /* ======================== */

"!"                           return tPRINT;
"!!"                          return tPRINTLN;

 /* =================== */
 /* ===[ CONDICOES ]=== */
 /* =================== */

"if"                          return tIF; 
"else"                        return tELSE; 
"elif"                        return tELIF;

 /* ==================== */
 /* ===[ INSTRUCOES ]=== */
 /* ==================== */

"stop"                        return tSTOP;
"next"                        return tNEXT;
"return"                      return tRETURN;

 /* =============== */
 /* ===[ TIPOS ]=== */
 /* =============== */

"int"                         return tINTEGER_TYPE;
"double"                      return tDOUBLE_TYPE;
"string"                      return tSTRING_TYPE;
"void"                        return tVOID_TYPE;
"null"                        return tNULL;

 /* ====================== */
 /* ===[ DECLARATIONS ]=== */
 /* ====================== */

"foreign"                     return tFOREIGN;
"forward"                     return tFORWARD;
"public"                      return tPUBLIC;
"auto"                        return tAUTO;

 /* ========================= */
 /* ===[ IDENTIFICADORES ]=== */
 /* ========================= */

[A-Za-z][A-Za-z0-9_]*         yylval.s = new std::string(yytext); return tIDENTIFIER;

 /* ===================== */
 /* ===[ COMENTARIOS ]=== */
 /* ===================== */

"//".*\n                      {;}

"/*"                          yy_push_state(X_COMMENT);
<X_COMMENT>"/*"               yy_push_state(X_COMMENT);
<X_COMMENT>"*/"               yy_pop_state();
<X_COMMENT>.|\n               ;

 /* ================ */
 /* ===[ STRING ]=== */
 /* ================ */

"\""                           yy_push_state(X_STRING);
<X_STRING>\\                  { yy_push_state(X_BACKSLASH); }
<X_STRING>"\""                {
                                yylval.s = new std::string(strlit.str());
                                strlit.str("");
                                yy_pop_state();
                                return tSTRING;
                              }
<X_STRING>"...\n"             ;
<X_STRING>\0                  yyerror("NULL character in string");               
<X_STRING>\n                  yyerror("Newline in string");          
<X_STRING>.                   strlit << *yytext;

<X_BACKSLASH>t                 strlit << '\t'; yy_pop_state();
<X_BACKSLASH>n                 strlit << '\n'; yy_pop_state();
<X_BACKSLASH>r                 strlit << '\r'; yy_pop_state();
<X_BACKSLASH>\"                strlit << '\"'; yy_pop_state();
<X_BACKSLASH>\\                strlit << '\\'; yy_pop_state();

<X_BACKSLASH>[0-7]{1,3}        {
                                 unsigned long res = std::stoul(yytext, NULL, 8);
                                 if (res > 255) {
                                  yyerror("Invalid 8 bit number.");
                                 }
                                 strlit << (char)(unsigned char)res;
                                 yy_pop_state();
                               }
<X_BACKSLASH>.                 strlit << *yytext; yy_pop_state();

 /* ================ */
 /* ==[ INTEIROS ]== */
 /* ================ */


0[0-7]+               { try { yylval.i = std::stoul(yytext, NULL, 8); return tINTEGER; } catch (const std::out_of_range& e) { yyerror("Integer is out of range"); } }
0[0-9]+              yyerror("Invalid base 8 number.");
0|[1-9][0-9]*        { try { yylval.i = std::stoul(yytext, NULL, 10); return tINTEGER;} catch (const std::out_of_range& e) {yyerror("Integer is out of range"); } }

 /* =============== */
 /* ===[ REAIS ]=== */
 /* =============== */

([0-9]*\.[0-9]+|[0-9]+\.[0-9]*)([eE][-+]?[0-9]+)? { yylval.d = strtod(yytext, nullptr); return tDOUBLE; }



 /* ============== */
 /* ===[ MISC ]=== */
 /* ============== */

[-()<>=+*/%;{}.~,]       return *yytext;

[ \t\n]+               ; /* ignore whitespace */

.                      yyerror("Unknown character");

%%

